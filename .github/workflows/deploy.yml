name: Deploy Backend

on:
  push:
    branches:
      - backend_dev-v2

permissions:
  contents: read
  deployments: write

jobs:
  deploy:
    runs-on: ubuntu-22.04
    environment: production

    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      APP_NAME: lsm-0.0.1-SNAPSHOT.jar

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'

      - name: Set up SSH
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts

      - name: Build Application Without Tests
        run: |
          ./gradlew clean build -x test --no-daemon
          cp build/libs/$APP_NAME .

      - name: Deploy to Server
        timeout-minutes: 5
        run: |
          # Copy the JAR file to the server
          scp -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts $APP_NAME $SERVER_USER@$SERVER_IP:/opt/learnovify/
          
          # SSH into the server and deploy
          ssh -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts $SERVER_USER@$SERVER_IP << EOF
            set -euo pipefail
            
            # Define variables inside the SSH session
            DEPLOY_DIR="/opt/learnovify"
            BACKUP_DIR="\${DEPLOY_DIR}/backups"
            APP_NAME="$APP_NAME"
            
            # Ensure sufficient disk space
            if [ \$(df -P \$DEPLOY_DIR | awk 'NR==2 {print \$5}' | tr -d '%') -gt 90 ]; then
              echo "Error: Insufficient disk space"
              exit 1
            fi

            # Backup the current JAR with retention
            mkdir -p \$BACKUP_DIR
            [ -f "\${DEPLOY_DIR}/lsm.jar" ] && mv "\${DEPLOY_DIR}/lsm.jar" "\${BACKUP_DIR}/lsm.jar.bak.\$(date +%Y%m%d-%H%M%S)"
            find \$BACKUP_DIR -name "*.bak.*" -mtime +7 -delete

            # Deploy the new version
            mv "\${DEPLOY_DIR}/\$APP_NAME" "\${DEPLOY_DIR}/lsm.jar"
            chmod 640 "\${DEPLOY_DIR}/lsm.jar"

            # Restart the service
            sudo systemctl restart learnovify.service || {
              echo "Error: Failed to restart service"
              exit 1
            }

            # Health check for service status
            timeout 30s bash -c '
              until systemctl is-active --quiet learnovify.service; do
                sleep 2
              done
            ' || {
              echo "Error: Service failed to start within timeout"
              exit 1
            }
          EOF

      - name: Health Check
        run: |
          for i in {1..12}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.APP_URL }}/health")
            if [ "$response" = "200" ]; then
              echo "Health check passed"
              exit 0
            fi
            sleep 5
          done
          echo "Error: Health check failed after 1 minute"
          exit 1

      - name: Cleanup
        if: always()
        run: |
          ssh-agent -k || true
